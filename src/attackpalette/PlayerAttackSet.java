package attackpalette;

import gamestate.Bitboard;
import gamestate.BitboardGen;
import gamestate.Board;
import gamestate.DebugLibrary;
import gamestate.GlobalConstants.PieceType;
import gamestate.GlobalConstants.Player;

public class PlayerAttackSet {
	private long[] bbdata = new long[50];// bitboards of various attacks;
	//CONSIDERkeeping a ledger of piece locations  = bishop0 is at c6, for example.

	public static class SetType {
		// integer values correspond to indexes of bbdata array;
		/**
		 * For R, N, B,Q types Type1 is non-empty iff Type0 is populated. If both types
		 * are populated, Type0 is generated by the piece with LARGER square origin.
		 * This is a side effect of the way bit iteration works
		 */
		final static int PawnSetEast = 0;// east
		final static int PawnSetWest = 1;// west

		final static int KnightSet0 = 2;
		final static int KnightSet1 = 3;
		// considering up to 3 friendly pieces in a stack. B-Q-Q-P is not considered as
		// too unlikely.
		final static int BishopSet0 = 4;
		final static int BishopPawnSet0 = 5;
		final static int BishopQueenSet0 = 6;
		final static int BishopQueenPawnSet0 = 7;
		final static int BishopQueenQueenSet0 = 8;
		
		final static int BishopSet1 = 9;
		final static int BishopPawnSet1 = 10;
		final static int BishopQueenSet1 = 11;
		final static int BishopQueenPawnSet1 = 12;
		final static int BishopQueenQueenSet1 = 13;
		
		
		final static int RookSet0 = 14;
		final static int RookRookSet0 = 15;
		final static int RookQueenSet0 = 16;
		final static int RookRookQueenSet0 = 17;
		final static int RookQueenRookSet0 = 18;
		final static int RookQueenQueenSet0 = 19;
		
		final static int RookSet1 = 20;
		final static int RookRookSet1 = 21;
		final static int RookQueenSet1 = 22;
		final static int RookRookQueenSet1 = 23;
		final static int RookQueenRookSet1 = 24;
		final static int RookQueenQueenSet1 = 25;
		
		
		final static int QueenSet0 = 26;
		final static int QueenPawnSet0 = 27;
		final static int QueenBishopSet0 = 28;
		final static int QueenBishopPawnSet0 = 29;
		final static int QueenQueenSet0 = 30;
		final static int QueenQueenPawnSet0 = 31;
		final static int QueenQueenBishopSet0 = 32;
		final static int QueenBishopQueenSet0 = 33;
		final static int QueenRookSet0 = 34;
		final static int QueenQueenRookSet0 = 35;
		final static int QueenRookQueenSet0 = 36;
		
		final static int QueenSet1 = 37;
		final static int QueenPawnSet1 = 38;
		final static int QueenBishopSet1 = 39;
		final static int QueenBishopPawnSet1 = 40;
		final static int QueenQueenSet1 = 41;
		final static int QueenQueenPawnSet1 = 42;
		final static int QueenQueenBishopSet1 = 43;
		final static int QueenBishopQueenSet1 = 44;
		final static int QueenRookSet1 = 45;
		final static int QueenQueenRookSet1 = 46;
		final static int QueenRookQueenSet1 = 47;
		
		final static int KingSet = 49;

		final static int[] SET_TYPES = { PawnSetEast, PawnSetWest, 
				KnightSet0, KnightSet1, 
				BishopSet0, BishopPawnSet0, BishopQueenSet0, BishopQueenPawnSet0, BishopQueenQueenSet0, 
				BishopSet1,	BishopPawnSet1, BishopQueenSet1, BishopQueenPawnSet1, BishopQueenQueenSet1,
				RookSet0,RookRookSet0,RookQueenSet0,RookRookQueenSet0,RookQueenRookSet0,RookQueenQueenSet0,
				RookSet1,RookRookSet1,RookQueenSet1,RookRookQueenSet1,RookQueenRookSet1,RookQueenQueenSet1,
				QueenSet0,QueenPawnSet0,QueenBishopSet0,QueenBishopPawnSet0,QueenQueenSet0,QueenQueenPawnSet0,QueenQueenBishopSet0,QueenBishopQueenSet0,QueenRookSet0,QueenQueenRookSet0,QueenRookQueenSet0,
				
				KingSet };
	}

	public long get(int type) {
		DebugLibrary.validateValueInRange(type, SetType.SET_TYPES);
		return bbdata[type];
	}

	public void set(int type, long val) {
		DebugLibrary.validateValueInRange(type, SetType.SET_TYPES);
		bbdata[type] = val;
	}

	private long augmentWithPawnAttacks(Board brd, int player, long currentAttackSet, int sqOrigin) {
		long attackedPawns = currentAttackSet & brd.getPieces(player, PieceType.PAWN);
		long attackedPawnAttackSet;
		{// pawns
			if (player == Player.WHITE)
				attackedPawnAttackSet = Bitboard.shiftEast(Bitboard.shiftNorth(attackedPawns)) | Bitboard.shiftWest(Bitboard.shiftNorth(attackedPawns));
			else
				attackedPawnAttackSet = Bitboard.shiftEast(Bitboard.shiftSouth(attackedPawns)) | Bitboard.shiftSouth(Bitboard.shiftNorth(attackedPawns));
		}
		long newAttackSet = BitboardGen.getBishopSetEmptyBoard(sqOrigin) & attackedPawnAttackSet & ~currentAttackSet;
		return newAttackSet;
	}

	public void initialize(Board brd, int player) {
		DebugLibrary.validatePlayer(player);

		for (int i = 0; i < bbdata.length; ++i)
			bbdata[i] = 0L;
		// OPTIMIZE: use denorm king position
		set(SetType.KingSet, BitboardGen.getKingSet(Bitboard.getLowSquareIndex(brd.getPieces(player, PieceType.KING))));
		{// pawns
			long pawns = brd.getPieces(player, PieceType.PAWN);
			if (player == Player.WHITE) {
				set(SetType.PawnSetEast, Bitboard.shiftEast(Bitboard.shiftNorth(pawns)));
				set(SetType.PawnSetWest, Bitboard.shiftWest(Bitboard.shiftNorth(pawns)));
			} else {
				set(SetType.PawnSetEast, Bitboard.shiftEast(Bitboard.shiftSouth(pawns)));
				set(SetType.PawnSetWest, Bitboard.shiftWest(Bitboard.shiftSouth(pawns)));
			}
		}

		{// knights
			int bi = 0;
			int numOfType = 0;
			for (long zarg = brd.getPieces(player, PieceType.KNIGHT), barg = Bitboard.isolateLsb(zarg); zarg != 0L; zarg = Bitboard.extractLsb(zarg), barg = Bitboard.isolateLsb(zarg)) {// iterateOnBitIndices
				bi = Bitboard.getLowSquareIndex(barg);
				if (numOfType == 0) {
					set(SetType.KnightSet0, BitboardGen.getKnightSet(bi));
					numOfType++;
				} else {
					set(SetType.KnightSet1, get(SetType.KnightSet0));
					set(SetType.KnightSet0, BitboardGen.getKnightSet(bi));
					break;
				}
			}
		}

		{// bishops
			int bi = 0;
			int numOfType = 0;
			for (long zarg = brd.getPieces(player, PieceType.BISHOP), barg = Bitboard.isolateLsb(zarg); zarg != 0L; zarg = Bitboard.extractLsb(zarg), barg = Bitboard.isolateLsb(zarg)) {// iterateOnBitIndices
				bi = Bitboard.getLowSquareIndex(barg);
				if (numOfType == 0) {
					set(SetType.BishopSet0, BitboardGen.getBishopSet(bi, brd.getOccupied()));
					set(SetType.BishopPawnSet0, augmentWithPawnAttacks(brd, player, get(SetType.BishopSet0), bi));
					long attackedQueens = get(SetType.BishopSet0) & brd.getPieces(player, PieceType.QUEEN);
					set(SetType.BishopQueenSet0, BitboardGen.getBishopSet(bi, brd.getOccupied() & ~attackedQueens) & ~get(SetType.BishopSet0));
					set(SetType.BishopQueenPawnSet0, augmentWithPawnAttacks(brd, player, get(SetType.BishopQueenSet0), bi) & ~get(SetType.BishopSet0));
					long attackedQueens2 = get(SetType.BishopQueenSet0) & brd.getPieces(player, PieceType.QUEEN);
					set(SetType.BishopQueenQueenSet0,
							BitboardGen.getBishopSet(bi, brd.getOccupied() & ~attackedQueens & ~attackedQueens2) & ~get(SetType.BishopSet0) & ~get(SetType.BishopQueenSet0));
					numOfType++;
				} else {
					set(SetType.BishopSet1, get(SetType.BishopSet0));
					set(SetType.BishopPawnSet1, get(SetType.BishopPawnSet0));
					set(SetType.BishopQueenSet1, get(SetType.BishopQueenSet0));
					set(SetType.BishopQueenPawnSet1, get(SetType.BishopQueenPawnSet0));
					set(SetType.BishopQueenQueenSet1, get(SetType.BishopQueenQueenSet0));
					
					set(SetType.BishopSet0, BitboardGen.getBishopSet(bi, brd.getOccupied()));
					set(SetType.BishopPawnSet0, augmentWithPawnAttacks(brd, player, get(SetType.BishopSet0), bi));
					long attackedQueens = get(SetType.BishopSet0) & brd.getPieces(player, PieceType.QUEEN);
					set(SetType.BishopQueenSet0, BitboardGen.getBishopSet(bi, brd.getOccupied() & ~attackedQueens) & ~get(SetType.BishopSet0));
					set(SetType.BishopQueenPawnSet0, augmentWithPawnAttacks(brd, player, get(SetType.BishopQueenSet0), bi) & ~get(SetType.BishopSet0));
					long attackedQueens2 = get(SetType.BishopQueenSet0) & brd.getPieces(player, PieceType.QUEEN);
					set(SetType.BishopQueenQueenSet0,
							BitboardGen.getBishopSet(bi, brd.getOccupied() & ~attackedQueens & ~attackedQueens2) & ~get(SetType.BishopSet0) & ~get(SetType.BishopQueenSet0));
					break;
				}
			}
			
			{// Rooks
				bi = 0;
				numOfType = 0;
				for (long zarg = brd.getPieces(player, PieceType.ROOK), barg = Bitboard.isolateLsb(zarg); zarg != 0L; zarg = Bitboard.extractLsb(zarg), barg = Bitboard.isolateLsb(zarg)) {// iterateOnBitIndices
					bi = Bitboard.getLowSquareIndex(barg);
					if (numOfType == 0) {
						set(SetType.RookSet0, BitboardGen.getRookSet(bi, brd.getOccupied()));
						long attackedRooks = get(SetType.RookSet0) & brd.getPieces(player, PieceType.ROOK);
						set(SetType.RookRookSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedRooks) & ~get(SetType.RookSet0));
						long attackedQueens = get(SetType.RookSet0) & brd.getPieces(player, PieceType.QUEEN);
						set(SetType.RookQueenSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedQueens) & ~get(SetType.RookSet0));
						long attackedRooks2 = get(SetType.RookQueenSet0) & brd.getPieces(player, PieceType.ROOK);
						set(SetType.RookQueenRookSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedQueens & ~attackedRooks2) & ~get(SetType.RookSet0) & ~get(SetType.RookQueenSet0));
						long attackedQueens2 = get(SetType.RookQueenSet0) & brd.getPieces(player, PieceType.QUEEN);
						set(SetType.RookQueenQueenSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedQueens & ~attackedQueens2) & ~get(SetType.RookSet0) & ~get(SetType.RookQueenSet0));
						attackedQueens = get(SetType.RookRookSet0) & brd.getPieces(player, PieceType.QUEEN);
						set(SetType.RookRookQueenSet0, BitboardGen.getRookSet(bi, brd.getOccupied()& ~attackedRooks & ~attackedQueens) & ~get(SetType.RookSet0)& ~get(SetType.RookRookSet0));
						numOfType++;
					} else {
						set(SetType.RookSet1, get(SetType.RookSet0));
						set(SetType.RookRookSet1, get(SetType.RookRookSet0));
						set(SetType.RookQueenSet1, get(SetType.RookQueenSet0));
						set(SetType.RookRookQueenSet1, get(SetType.RookRookQueenSet0));
						set(SetType.RookQueenRookSet1, get(SetType.RookQueenRookSet0));
						set(SetType.RookQueenQueenSet1, get(SetType.RookQueenQueenSet0));
						
						set(SetType.RookSet0, BitboardGen.getRookSet(bi, brd.getOccupied()));
						long attackedRooks = get(SetType.RookSet0) & brd.getPieces(player, PieceType.ROOK);
						set(SetType.RookRookSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedRooks) & ~get(SetType.RookSet0));
						long attackedQueens = get(SetType.RookSet0) & brd.getPieces(player, PieceType.QUEEN);
						set(SetType.RookQueenSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedQueens) & ~get(SetType.RookSet0));
						long attackedRooks2 = get(SetType.RookQueenSet0) & brd.getPieces(player, PieceType.ROOK);
						set(SetType.RookQueenRookSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedQueens & ~attackedRooks2) & ~get(SetType.RookSet0) & ~get(SetType.RookQueenSet0));
						long attackedQueens2 = get(SetType.RookQueenSet0) & brd.getPieces(player, PieceType.QUEEN);
						set(SetType.RookQueenQueenSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedQueens & ~attackedQueens2) & ~get(SetType.RookSet0) & ~get(SetType.RookQueenSet0));
						attackedQueens = get(SetType.RookRookSet0) & brd.getPieces(player, PieceType.QUEEN);
						set(SetType.RookRookQueenSet0, BitboardGen.getRookSet(bi, brd.getOccupied()& ~attackedRooks & ~attackedQueens) & ~get(SetType.RookSet0)& ~get(SetType.RookRookSet0));
						
						break;
					}
				}
			}
			
			{//queens
				bi = 0;
				numOfType = 0;
				for (long zarg = brd.getPieces(player, PieceType.QUEEN), barg = Bitboard.isolateLsb(zarg); zarg != 0L; zarg = Bitboard.extractLsb(zarg), barg = Bitboard.isolateLsb(zarg)) {// iterateOnBitIndices
					bi = Bitboard.getLowSquareIndex(barg);
					if (numOfType == 0) {
						
						populateQueenAttacks(brd, bi, player);
						

						numOfType++;
					} else {
						set(SetType.QueenSet1, get(SetType.QueenSet0));
						set(SetType.QueenPawnSet1, get(SetType.QueenPawnSet0));
						set(SetType.QueenBishopSet1, get(SetType.QueenBishopSet0));
						set(SetType.QueenBishopPawnSet1, get(SetType.QueenBishopPawnSet0));
						set(SetType.QueenQueenSet1, get(SetType.QueenQueenSet0));
						set(SetType.QueenQueenPawnSet1, get(SetType.QueenQueenPawnSet0));
						set(SetType.QueenQueenBishopSet1, get(SetType.QueenQueenBishopSet0));
						set(SetType.QueenBishopQueenSet1, get(SetType.QueenBishopQueenSet0));
						set(SetType.QueenRookSet1, get(SetType.QueenRookSet0));
						set(SetType.QueenQueenRookSet1, get(SetType.QueenQueenRookSet0));
						set(SetType.QueenRookQueenSet1, get(SetType.QueenRookQueenSet0));
						
						populateQueenAttacks(brd, bi, player);
						
						
						
						
						break;
					}
				}
			
			
			
			}
		}

	}
	
	private void populateQueenAttacks(Board brd, int bi, int player) {
		long bishopSet = BitboardGen.getBishopSet(bi, brd.getOccupied());
		long rookSet = BitboardGen.getRookSet(bi, brd.getOccupied());
		set(SetType.QueenSet0, bishopSet | rookSet);
		set(SetType.QueenPawnSet0, augmentWithPawnAttacks(brd, player, bishopSet, bi));
		long attackedBishops = bishopSet & brd.getPieces(player, PieceType.BISHOP);
		set(SetType.QueenBishopSet0, BitboardGen.getBishopSet(bi, brd.getOccupied() & ~attackedBishops) & ~get(SetType.QueenSet0));
		set(SetType.QueenBishopPawnSet0, augmentWithPawnAttacks(brd, player, get(SetType.QueenBishopSet0), bi) & ~get(SetType.QueenSet0));
		long attackedQueens2 = get(SetType.QueenBishopSet0) & brd.getPieces(player, PieceType.QUEEN);
		set(SetType.QueenBishopQueenSet0, BitboardGen.getBishopSet(bi, brd.getOccupied() & ~attackedBishops & ~attackedQueens2) & ~get(SetType.QueenSet0) & ~get(SetType.QueenBishopSet0));
		long attackedRooks = rookSet & brd.getPieces(player, PieceType.ROOK);
		set(SetType.QueenRookSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedRooks) & ~get(SetType.QueenSet0));
		attackedQueens2 = get(SetType.QueenRookSet0) & brd.getPieces(player, PieceType.QUEEN);
		set(SetType.QueenRookQueenSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedRooks & ~attackedQueens2) & ~get(SetType.QueenSet0) & ~get(SetType.QueenRookSet0));
		
		//treating blocker queen as bishop for now...
		long attackedQueens = bishopSet & brd.getPieces(player, PieceType.QUEEN);
		set(SetType.QueenQueenSet0, BitboardGen.getBishopSet(bi, brd.getOccupied() & ~attackedQueens) & ~get(SetType.QueenSet0));
		set(SetType.QueenQueenPawnSet0, augmentWithPawnAttacks(brd, player, get(SetType.QueenQueenSet0), bi) & ~get(SetType.QueenSet0));
		long attackedBishops2 = get(SetType.QueenQueenSet0) & brd.getPieces(player, PieceType.BISHOP);
		set(SetType.QueenQueenBishopSet0, BitboardGen.getBishopSet(bi, brd.getOccupied() & ~attackedQueens & ~attackedBishops2) & ~get(SetType.QueenSet0) & ~get(SetType.QueenQueenSet0));
		
		attackedQueens = rookSet & brd.getPieces(player, PieceType.QUEEN);
		long temp = BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedQueens) & ~get(SetType.QueenSet0);// = QQ as rook
		
		long attackedRooks2 = temp & brd.getPieces(player, PieceType.ROOK);
		set(SetType.QueenQueenRookSet0, BitboardGen.getRookSet(bi, brd.getOccupied() & ~attackedQueens & ~attackedRooks2) & ~get(SetType.QueenSet0) & ~temp);
		
		set(SetType.QueenQueenSet0, get(SetType.QueenQueenSet0) | temp);
		
		//QueenQueenSet0,QueenQueenRookSet0,
	}

}
